<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smart.rider.shop.mapper.ShopMapper">
	
	<!-- 매장 resultMap -->
	<resultMap type="com.smart.rider.shop.dto.ShopDTO" id="shopMap">
		<result column="shop_code" 			property="shopCode"/>
		<result column="contract_code" 		property="contractCode"/>
		<result column="member_id" 			property="memberId"/>
		<result column="shop_name" 			property="shopName"/>
		<result column="shop_address" 		property="shopAddress"/>
		<result column="shop_phone" 		property="shopPhone"/>
		<result column="shop_date" 			property="shopDate"/>
	</resultMap>
	
	<!-- 매장계약관리 전체조회 쿼리 -->
	<select id="relationList" resultType="com.smart.rider.shop.dto.ShopRelationDTO">
		select
			 contract_shop_code AS contractShopCode
			,member_id  AS memberId
			,shop_code AS shopCode
			,contract_shop_date AS contractShopDate
		FROM shop_relation
	</select>
	
	<!-- 가져온 코드로 데이터 중 member_id값 가져오기 -->
	<select id="getCode" resultType="com.smart.rider.contract.dto.ContractDTO" parameterType="String">
		SELECT 
				member_id AS memberId
		FROM contract
		WHERE contract_code = #{Code};
	</select>
	
	<!-- 가져온 코드로 데이터 중 member_id값 가져오기 -->
	<select id="getScode" resultType="com.smart.rider.shop.dto.ShopDTO" parameterType="String">
		SELECT 
				member_id AS memberId
		FROM shop
		WHERE shop_code = #{Code};
	</select>
	
	<!-- 매장코드  자동증가 -->
	<select id="shopCodeMax" resultType="String">
		SELECT 
			MAX(LPAD(RIGHT(shop_code, 4)+1, '4' , '0')) 
		FROM shop;
	</select>
	
	<!-- 매장계약코드 자동증가 -->
	<select id="relationCodeMax" resultType="String">
		SELECT 
			MAX(LPAD(RIGHT(contract_shop_code, 4)+1, '4' , '0')) 
		FROM shop_relation;
	</select>
	
	<!--매장 생성 쿼리 -->
	<insert id="shopInsert" parameterType="com.smart.rider.shop.dto.ShopDTO">
			INSERT INTO shop(
				 shop_code
				,contract_code  
				,member_id  
			 	,shop_name
			 	,shop_address
			 	,shop_phone
			 	,shop_date)
		VALUES ( 				
				 #{shopCode}
				,#{contractCode}
				,#{memberId}
			 	,#{shopName}
			 	,#{shopAddress}
		 	  	,#{shopPhone}
		 	    ,NOW()
		 	    )
	</insert>
	
	<!-- 계약릴레이션  생성 쿼리  -->
	<insert id="relationInsert" parameterType="com.smart.rider.shop.dto.ShopRelationDTO">
		INSERT INTO shop_relation(
		 contract_shop_code
		,member_id
		,shop_code
		,contract_shop_date
		)
		VALUES (
		 #{contractShopCode}
		,#{memberId}
		,#{shopCode}
		, NOW()
		)
	</insert>

	<!-- 기본 값으로 설정되어 있는 계약매장코드 값을 수정한다.(계약매장코드 생성시) -->
	<update id="memberUpdate" parameterType="String"> 
	UPDATE member
	SET
		contract_shop_code=#{getrelationCode}
	WHERE member_id=#{getrelationId}
	</update>
	
	<!--매장 삭제 가능 -->
	<select id="shopListYes" resultMap="shopMap">
		SELECT 
			 s.shop_code
			,s.contract_code
			,s.member_id
			,s.shop_name
			,s.shop_address
			,s.shop_phone
			,s.shop_date
		FROM shop s LEFT JOIN shop_relation sr
		ON s.shop_code = sr.shop_code
		WHERE sr.shop_code IS null
	</select>
	
	<!--매장 삭제 불가능  -->
	<select id="shopListNo" resultMap="shopMap">
		SELECT DISTINCT 
			 s.shop_code
			,s.contract_code
			,s.member_id
			,s.shop_name
			,s.shop_address
			,s.shop_phone
			,s.shop_date
		FROM shop s, shop_relation sr
		WHERE s.shop_code = sr.shop_code
	</select>
	
	<!--매장 삭제 가능 검색 -->
	<select id="shopSearchListYes" parameterType="com.smart.rider.main.dto.SearchDTO" resultMap="shopMap">
		SELECT 
			 s.shop_code
			,s.contract_code
			,s.member_id
			,s.shop_name
			,s.shop_address
			,s.shop_phone
			,s.shop_date
		FROM shop s LEFT JOIN shop_relation sr
		ON s.shop_code = sr.shop_code
		WHERE sr.shop_code IS null
		<if test="searchValue neq null and searchValue neq ''.toString()">
            AND
                s.shop_name LIKE CONCAT('%',#{searchValue},'%')
        </if>
        <if test="beginDate neq ''.toString() and endDate eq ''.toString()">
        	AND 
        		s.shop_date between #{beginDate} and NOW()		
        </if>
        <if test="beginDate eq ''.toString() and endDate neq ''.toString()">
        	AND 
        		s.shop_date between '1990-01-01' and #{endDate}
        </if>
        <if test="beginDate neq ''.toString() and endDate neq ''.toString()">
        	AND 
        		s.shop_date between #{beginDate} and #{endDate}
        </if>
	</select>
	
	<!--매장 삭제 불가능  검색  -->
	<select id="shopSearchListNo" parameterType="com.smart.rider.main.dto.SearchDTO" resultMap="shopMap">
		SELECT DISTINCT 
			 s.shop_code
			,s.contract_code
			,s.member_id
			,s.shop_name
			,s.shop_address
			,s.shop_phone
			,s.shop_date
		FROM shop s, shop_relation sr
		WHERE s.shop_code = sr.shop_code
			<if test="searchValue neq null and searchValue neq ''.toString()">
            AND
                s.shop_name LIKE CONCAT('%',#{searchValue},'%')
        </if>
        <if test="beginDate neq ''.toString() and endDate eq ''.toString()">
        	AND 
        		s.shop_date between #{beginDate} and NOW()		
        </if>
        <if test="beginDate eq ''.toString() and endDate neq ''.toString()">
        	AND 
        		s.shop_date between '1990-01-01' and #{endDate}
        </if>
        <if test="beginDate neq ''.toString() and endDate neq ''.toString()">
        	AND 
        		s.shop_date between #{beginDate} and #{endDate}
        </if>
	</select>
	
	<!-- 매장관리 전체조회 쿼리 -->
	<select id="shopListAll" resultMap="shopMap">
		select
			shop_code 
			,contract_code 
			,member_id 
			,shop_name
			,shop_address
			,shop_phone
			,shop_date
		FROM shop
	</select>
	
	<!-- 전체리스트 -->
	<select id="shopList" parameterType="java.util.Map" resultMap="shopMap">
		SELECT 
			shop_code 
			,contract_code 
			,member_id 
			,shop_name
			,shop_address
			,shop_phone
			,shop_date
		FROM shop 
		ORDER BY shop_code DESC 
		LIMIT #{currentPage}, #{rowPerPage}	
	</select>
	
	<!-- 페이징 처리를 위한 전체행의 갯수 -->
	<select id="selectShopCount" resultType="int">
		SELECT 
			COUNT(*) 
		FROM shop
	</select>
	
	<!-- 매장 인원 조회 -->
		<select id="personnelList" parameterType="String"  resultType="com.smart.rider.member.dto.MemberDTO">
		SELECT 
			 member_level AS memberLevel
			,member_name AS memberName
			,member_birth AS memberBirth
			,member_address AS memberAddress
			,member_phone AS memberPhone
			FROM member
		WHERE contract_shop_code = #{code}
	
	</select>
	
	<!--코드로 데이터 조회-->
	<select id="shopUpdate" parameterType="String" resultMap="shopMap">
		SELECT 
			shop_code 
			,contract_code 
			,member_id 
			,shop_name
			,shop_address
			,shop_phone
			,shop_date
		FROM shop 
		WHERE shop_code=#{shop_code}
	</select>
	
	<!--매장정보 수정  -->
	<update id="shopUpdateSet" parameterType="com.smart.rider.shop.dto.ShopDTO">
		UPDATE shop
		SET
			 shop_name=#{shopName}
			,shop_address=#{shopAddress}
			,shop_phone=#{shopPhone}
			,shop_date=NOW()
		WHERE shop_code=#{shopCode}
	
	</update>
	

</mapper>

